#!/usr/bin/env bash
# -*- bash -*-
#
#
ignore="$IGNORE"
action="$1"
shift

set -u -e -o pipefail

BIN=/apps/bash_setup/bin
function git_is_clean {
    if ! git_repo_is_clean
    then
      echo -e "\n!!! GIT repo not clean enough.\n" 1>&2
      exit 1
    fi
}


case "$action" in

  "help")
    echo " ====================================================="
    echo ""
    echo " $ bash_setup bump current"
    echo " $ bash_setup bump major"
    echo " $ bash_setup bump minor"
    echo " $ bash_setup bump patch"
    echo " $ bash_setup bump_and_commit  major|minor|patch"
    echo ""
    echo " $ bash_setup o-x              dir  # === make bin files non-executable for others"
    echo ""
    echo " $ bash_setup watch  my_script -myargs -myargs"
    echo ""
    echo " ====================================================="
    echo ""
    exit 0
    ;;

  "bump")
    if [[ -z "$(which bump)" ]]; then
      echo "!!! install rubygem: gem install bump"
      exit 1
    fi
    if [[ "$1" != "current" ]]; then
      git_is_clean
      echo -e "=== Bumping from: $(bump current)\n"
    fi
    bump $1 --no-commit --no-bundle
    ;;

  "bump_and_commit")
    bash_setup bump "$1"
    VER=$(cat VERSION)

    git_update
    git commit -m   "Bump: $VER"
    git tag         "v$VER"
    ;;

  "bump_commit_push")
    bash_setup bump_and_commit "$@"
    git push origin "v$(cat VERSION)"
    ;;

  "watch")
    #
    #  For more info on inotifywait:
    #    http://manpages.ubuntu.com/manpages/hardy/man1/inotifywait.1.html
    #
    #  The script will send the output
    #  of inotifywaut to `my_script`.
    #
    #  Files/dirs with .git in the name are ignored.
    #  Example:
    #     .git
    #     ./.git
    #     ./dir/file.git/
    if [[ ! -z "$ignore" ]]
    then
      ignore="--exclude $ignore"
    fi

    cmd="$@"

    if [[ -z "$@" ]]
    then
      echo "No command given. Exiting..." 1>&2
      exit 1
    fi

    # temp="$(mktemp)"
    # bash_setup watch_run $temp "$cmd" &
    # run_id=$!

    # cleanup () {
      # kill $run_id || true
      # rm $temp
    # }

    # trap cleanup SIGINT SIGTERM

    # echo "---- Process: $run_id ----"

    # === From an answer by "technosaurus":
    #     http://stackoverflow.com/a/18295696/841803
    inotifywait -q -m --exclude .git/ $ignore -r . | while read CHANGE
    do

      op=$(echo "$CHANGE" | cut -d' ' -f 2)
      file=$(echo "$CHANGE" | cut -d' ' -f 3)

      if [[ ( ! "$op" =~ "NOWRITE" ) && ( "$op" =~ "CLOSE" || "$op" =~ "WRITE" )  && ! -z "$file" ]]
      then
        echo ""
        echo $CHANGE
        $cmd &
      fi

    done
    ;;



  "o-x")
    dir="$1"

    chmod o-x $dir/*/bin/*
    for x in $dir/*/bin; do
      echo "=== $x"
      ls -l $x
      echo ""
    done
    ;;

  *)
    echo "Unknown option: $action" 1>&2
    exit 1
    ;;

esac


